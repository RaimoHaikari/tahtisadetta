}
getRecommendations <- function(prefs, person, similarity) {
# extract the items recommendee has already reviewed
personsReviews <- prefs[which(prefs[[personIdCol]] == person), itemIdCol] %>%
unlist(use.names = FALSE)
# get recommenders similarity socres
others <- getSimilarityScores(prefs, person , similarity)
# add reviews to the similarity table
others <- others %>% left_join(prefs, by=personIdCol)
# remove items recommendee has already reviewed and ignore scores of zero or lower
conditionA <- !others[[itemIdCol]] %in% personsReviews
conditionB <- others$Similarity > 0
others <- others[which(conditionA & conditionB),]
# calculate similarity * grade
others$simXGrade <- others[[valueIdCol]] * others$Similarity
# for each movie calculate sums of Similarity and similatiry * grade
# then ESTIMATED GRADE IS CALCULTED BY DIVISION..
others %>%
group_by_at(itemIdCol) %>%
summarise(Total = sum(simXGrade), Sim.Sum = sum(Similarity)) %>%
mutate(Estimate = Total / Sim.Sum, .keep = "unused") %>%
arrange(desc(.[[itemIdCol]]))
}
getRecommendations(reviews, 'Toby', pearson)
getRecommendations(reviews, 'Toby', euclidean)
View(reviews)
# Column that is used to identify persons
personIdCol <- "Movie"
# Column that is used to identify items
itemIdCol <- "Person"
View(reviews)
View(reviews)
topMatches(reviews, 'Superman Returns',5, euclidean)
#topMatches(reviews, 'Superman Returns',5, pearson)
#topMatches(reviews, 'Superman Returns',5, euclidean)
topMatches(reviews, 'Superman Returns',5, pearson)
calculateSimilarItems <- function(prefs, n = 10) {
items <- unique(prefs[[personIdCol]])
itemSimList <-  apply(
as.data.frame(items),
1,
function(x) topMatches(prefs, x[1],similarity = euclidean, includeOriginal = TRUE)
)
do.call("rbind", itemSimList)
}
itemsim <- calculateSimilarItems(reviews)
View(itemsim)
calculateSimilarItems <- function(prefs, n = 10) {
items <- unique(prefs[[itemIdCol]])
itemSimList <-  apply(
as.data.frame(items),
1,
function(x) topMatches(prefs, x[1],similarity = euclidean, includeOriginal = TRUE)
)
do.call("rbind", itemSimList)
}
# Column that is used to identify persons
personIdCol <- "Person"
# Column that is used to identify items
itemIdCol <- "Movie"
itemsim <- calculateSimilarItems(reviews)
calculateSimilarItems <- function(prefs, n = 10) {
items <- unique(prefs[[personIdCol]])
itemSimList <-  apply(
as.data.frame(items),
1,
function(x) topMatches(prefs, x[1],similarity = euclidean, includeOriginal = TRUE)
)
do.call("rbind", itemSimList)
}
# Column that is used to identify persons
personIdCol <- "Movie"
# Column that is used to identify items
itemIdCol <- "Person"
itemsim <- calculateSimilarItems(reviews)
calculateSimilarItems <- function(prefs, n = 10) {
items <- unique(prefs[[personIdCol]])
print(items)
itemSimList <-  apply(
as.data.frame(items),
1,
function(x) topMatches(prefs, x[1],similarity = euclidean, includeOriginal = TRUE)
)
do.call("rbind", itemSimList)
}
# Column that is used to identify persons
personIdCol <- "Movie"
# Column that is used to identify items
itemIdCol <- "Person"
itemsim <- calculateSimilarItems(reviews)
calculateSimilarItems <- function(prefs, n = 10) {
items <- unique(prefs[[personIdCol]])
#itemSimList <-  apply(
#  as.data.frame(items),
#  1,
#  function(x) topMatches(prefs, x[1],similarity = euclidean, includeOriginal = TRUE)
#)
#do.call("rbind", itemSimList)
items
}
# Column that is used to identify persons
personIdCol <- "Movie"
# Column that is used to identify items
itemIdCol <- "Person"
itemsim <- calculateSimilarItems(reviews)
calculateSimilarItems <- function(prefs, n = 10) {
# Get the list of movies!
items <- unique(prefs[[personIdCol]])
itemSimList <-  apply(
as.data.frame(items),
1,
function(x) topMatches(prefs, x[1],similarity = euclidean, includeOriginal = TRUE)
)
#do.call("rbind", itemSimList)
itemSimList
}
# Column that is used to identify persons
personIdCol <- "Movie"
# Column that is used to identify items
itemIdCol <- "Person"
itemsim <- calculateSimilarItems(reviews)
calculateSimilarItems <- function(prefs, n = 10, similarity = pearson) {
# Get the list of movies!
items <- unique(prefs[[personIdCol]])
itemSimList <-  apply(
as.data.frame(items),
1,
function(x) topMatches(prefs, x[1],similarity = euclidean, includeOriginal = TRUE)
)
do.call("rbind", itemSimList)
}
# Column that is used to identify persons
personIdCol <- "Movie"
# Column that is used to identify items
itemIdCol <- "Person"
itemsim <- calculateSimilarItems(reviews)
calculateSimilarItems <- function(prefs, n = 10, similarity = pearson) {
# Get the list of movies!
items <- unique(prefs[[personIdCol]])
itemSimList <-  apply(
as.data.frame(items),
1,
function(x) topMatches(prefs, x[1],similarity = euclidean, includeOriginal = TRUE)
)
#do.call("rbind", itemSimList)
itemSimList
}
# Column that is used to identify persons
personIdCol <- "Movie"
# Column that is used to identify items
itemIdCol <- "Person"
itemsim <- calculateSimilarItems(reviews)
calculateSimilarItems <- function(prefs, n = 10, similarity = pearson) {
# Get the list of movies!
items <- unique(prefs[[personIdCol]])
itemSimList <-  apply(
as.data.frame(items),
1,
function(x) topMatches(prefs, x[1],similarity = euclidean, includeOriginal = TRUE)
)
#do.call("rbind", itemSimList)
itemSimList
}
# Column that is used to identify persons
personIdCol <- "Movie"
# Column that is used to identify items
itemIdCol <- "Person"
itemsim <- calculateSimilarItems(reviews)
View(itemsim)
# Column that is used to identify persons
personIdCol <- "Movie"
# Column that is used to identify items
itemIdCol <- "Person"
itemsim <- calculateSimilarItems(reviews)
getRecommendedItems <- function(prefs, itemMatch, user) {
userRatings <- prefs[which(prefs[[personIdCol]] == user), c(itemIdCol, valueIdCol)]
userRatings
#moviesUserHasRated <- userRatings[[itemIdCol]] %>% unlist(use.names = FALSE)
# From the similarity matrix select movies:
# - user have reviewed
# - with each of those similarity no new ones
#conditionA <- itemMatch$Movie %in% moviesUserHasRated
#conditionB <- !itemMatch$Original %in% moviesUserHasRated
#scores <- itemMatch[which(conditionA & conditionB),] %>% arrange(.[[itemIdCol]])
#userRatings <- userRatings %>% left_join(scores, by = "Movie")
#userRatings$Score <- userRatings[[valueIdCol]] * userRatings$Similarity
#userRatings %>%
#  group_by(Original) %>%
#  summarise(Estimate = sum(Score) / sum(Similarity)) %>%
#  arrange(desc(Estimate))
}
# Column that is used to identify persons
personIdCol <- "Person"
# Column that is used to identify items
itemIdCol <- "Movie"
fooBar <- getRecommendedItems(reviews, itemsim, 'Toby')
View(fooBar)
getRecommendedItems <- function(prefs, itemMatch, user) {
# Extract the movies user has seen
userRatings <- prefs[which(prefs[[personIdCol]] == user), c(itemIdCol, valueIdCol)]
moviesUserHasRated <- userRatings[[itemIdCol]] %>% unlist(use.names = FALSE)
moviesUserHasRated
# From the similarity matrix select movies:
# - user have reviewed
# - with each of those similarity no new ones
#conditionA <- itemMatch$Movie %in% moviesUserHasRated
#conditionB <- !itemMatch$Original %in% moviesUserHasRated
#scores <- itemMatch[which(conditionA & conditionB),] %>% arrange(.[[itemIdCol]])
#userRatings <- userRatings %>% left_join(scores, by = "Movie")
#userRatings$Score <- userRatings[[valueIdCol]] * userRatings$Similarity
#userRatings %>%
#  group_by(Original) %>%
#  summarise(Estimate = sum(Score) / sum(Similarity)) %>%
#  arrange(desc(Estimate))
}
# Column that is used to identify persons
personIdCol <- "Person"
# Column that is used to identify items
itemIdCol <- "Movie"
fooBar <- getRecommendedItems(reviews, itemsim, 'Toby')
# Column that is used to identify persons
personIdCol <- "Person"
# Column that is used to identify items
itemIdCol <- "Movie"
fooBar <- getRecommendedItems(reviews, itemsim, 'Toby')
fooBar
getRecommendedItems <- function(prefs, itemMatch, user) {
# Extract the movies user has seen, keep movie and grade
userRatings <- prefs[which(prefs[[personIdCol]] == user), c(itemIdCol, valueIdCol)]
# get vector of movie names
moviesUserHasRated <- userRatings[[itemIdCol]] %>% unlist(use.names = FALSE)
# From the similarity data.frame select movies:
# - user have reviewed
# - with each of those similarity no new ones
conditionA <- itemMatch$Movie %in% moviesUserHasRated
conditionB <- !itemMatch$Original %in% moviesUserHasRated
scores <- itemMatch[which(conditionA & conditionB),] %>% arrange(.[[itemIdCol]])
scores
#userRatings <- userRatings %>% left_join(scores, by = "Movie")
#userRatings$Score <- userRatings[[valueIdCol]] * userRatings$Similarity
#userRatings %>%
#  group_by(Original) %>%
#  summarise(Estimate = sum(Score) / sum(Similarity)) %>%
#  arrange(desc(Estimate))
}
# Column that is used to identify persons
personIdCol <- "Person"
# Column that is used to identify items
itemIdCol <- "Movie"
fooBar <- getRecommendedItems(reviews, itemsim, 'Toby')
getRecommendedItems <- function(prefs, itemMatch, user) {
# Extract the movies user has seen, keep movie and grade
userRatings <- prefs[which(prefs[[personIdCol]] == user), c(itemIdCol, valueIdCol)]
# get vector of movie names
moviesUserHasRated <- userRatings[[itemIdCol]] %>% unlist(use.names = FALSE)
# From the similarity data.frame select movies:
# - user have reviewed
# - with each of those similarity no new ones
conditionA <- itemMatch$Movie %in% moviesUserHasRated
conditionB <- !itemMatch$Original %in% moviesUserHasRated
scores <- itemMatch[which(conditionA & conditionB),] %>% arrange(.[[itemIdCol]])
scores
#userRatings <- userRatings %>% left_join(scores, by = "Movie")
#userRatings$Score <- userRatings[[valueIdCol]] * userRatings$Similarity
#userRatings %>%
#  group_by(Original) %>%
#  summarise(Estimate = sum(Score) / sum(Similarity)) %>%
#  arrange(desc(Estimate))
}
# Column that is used to identify persons
personIdCol <- "Person"
# Column that is used to identify items
itemIdCol <- "Movie"
fooBar <- getRecommendedItems(reviews, itemsim, 'Toby')
calculateSimilarItems <- function(prefs, n = 10, similarity = pearson) {
# Get the list of movies!
items <- unique(prefs[[personIdCol]])
# For each item, calculate similarity values with other items
itemSimList <-  apply(
as.data.frame(items),
1,
function(x) topMatches(prefs, x[1],similarity = euclidean, includeOriginal = TRUE)
)
# Previous phase results list of data.frames
# convert that data srructure to single Data.Frame
do.call("rbind", itemSimList)
}
# Column that is used to identify persons
personIdCol <- "Movie"
# Column that is used to identify items
itemIdCol <- "Person"
itemsim <- calculateSimilarItems(reviews)
getRecommendedItems <- function(prefs, itemMatch, user) {
# Extract the movies user has seen, keep movie and grade
userRatings <- prefs[which(prefs[[personIdCol]] == user), c(itemIdCol, valueIdCol)]
# get vector of movie names
moviesUserHasRated <- userRatings[[itemIdCol]] %>% unlist(use.names = FALSE)
# From the similarity data.frame select movies:
# - user have reviewed
# - with each of those similarity no new ones
conditionA <- itemMatch$Movie %in% moviesUserHasRated
conditionB <- !itemMatch$Original %in% moviesUserHasRated
scores <- itemMatch[which(conditionA & conditionB),] %>% arrange(.[[itemIdCol]])
scores
#userRatings <- userRatings %>% left_join(scores, by = "Movie")
#userRatings$Score <- userRatings[[valueIdCol]] * userRatings$Similarity
#userRatings %>%
#  group_by(Original) %>%
#  summarise(Estimate = sum(Score) / sum(Similarity)) %>%
#  arrange(desc(Estimate))
}
# Column that is used to identify persons
personIdCol <- "Person"
# Column that is used to identify items
itemIdCol <- "Movie"
fooBar <- getRecommendedItems(reviews, itemsim, 'Toby')
fooBar
View(fooBar)
View(itemsim)
calculateSimilarItems <- function(prefs, n = 10, similarity = pearson) {
# Get the list of movies!
items <- unique(prefs[[personIdCol]])
# For each item, calculate similarity values with other items
# - Now we also wan't to store name of the target in topMatches
itemSimList <-  apply(
as.data.frame(items),
1,
function(x) topMatches(prefs, x[1],similarity = euclidean,
includeOriginal = TRUE)
)
# Previous phase results list of data.frames
# convert that data srructure to single Data.Frame
do.call("rbind", itemSimList)
}
calculateSimilarItems <- function(prefs, n = 10, similarity = pearson) {
# Get the list of movies!
items <- unique(prefs[[personIdCol]])
# For each item, calculate similarity values with other items
# - Now we also wan't to include name of the target in topMatches
itemSimList <-  apply(
as.data.frame(items),
1,
function(x) topMatches(prefs, x[1],similarity = euclidean,
includeOriginal = TRUE)
)
# Previous phase results list of data.frames
# convert that data srructure to single Data.Frame
do.call("rbind", itemSimList)
}
# Column that is used to identify persons
personIdCol <- "Movie"
# Column that is used to identify items
itemIdCol <- "Person"
itemsim <- calculateSimilarItems(reviews)
getRecommendedItems <- function(prefs, itemMatch, user) {
# Extract the movies user has seen, keep movie and grade
userRatings <- prefs[which(prefs[[personIdCol]] == user), c(itemIdCol, valueIdCol)]
# get vector of movie names
moviesUserHasRated <- userRatings[[itemIdCol]] %>% unlist(use.names = FALSE)
# From the similarity data.frame select movies:
# - user have reviewed
# - with each of those similarity no new ones
conditionA <- itemMatch$Movie %in% moviesUserHasRated
conditionB <- !itemMatch$Target %in% moviesUserHasRated
scores <- itemMatch[which(conditionA & conditionB),] %>% arrange(.[[itemIdCol]])
scores
#userRatings <- userRatings %>% left_join(scores, by = "Movie")
#userRatings$Score <- userRatings[[valueIdCol]] * userRatings$Similarity
#userRatings %>%
#  group_by(Target) %>%
#  summarise(Estimate = sum(Score) / sum(Similarity)) %>%
#  arrange(desc(Estimate))
}
# Column that is used to identify persons
personIdCol <- "Person"
# Column that is used to identify items
itemIdCol <- "Movie"
fooBar <- getRecommendedItems(reviews, itemsim, 'Toby')
fooBar
getRecommendedItems <- function(prefs, itemMatch, user) {
# Extract the movies user has seen, keep movie and grade
userRatings <- prefs[which(prefs[[personIdCol]] == user), c(itemIdCol, valueIdCol)]
# get vector of movie names
moviesUserHasRated <- userRatings[[itemIdCol]] %>% unlist(use.names = FALSE)
# From the similarity data.frame select movies that:
# - user has reviewed
# - with each of those records, keep the ones where "the movie in compare"
#   is new to user...
conditionA <- itemMatch$Movie %in% moviesUserHasRated
conditionB <- !itemMatch$Target %in% moviesUserHasRated
scores <- itemMatch[which(conditionA & conditionB),] %>% arrange(.[[itemIdCol]])
scores
#userRatings <- userRatings %>% left_join(scores, by = "Movie")
#userRatings$Score <- userRatings[[valueIdCol]] * userRatings$Similarity
#userRatings %>%
#  group_by(Target) %>%
#  summarise(Estimate = sum(Score) / sum(Similarity)) %>%
#  arrange(desc(Estimate))
}
# Column that is used to identify persons
personIdCol <- "Person"
# Column that is used to identify items
itemIdCol <- "Movie"
fooBar <- getRecommendedItems(reviews, itemsim, 'Toby')
fooBar
# Column that is used to identify persons
personIdCol <- "Person"
# Column that is used to identify items
itemIdCol <- "Movie"
fooBar <- getRecommendedItems(reviews, itemsim, 'Toby')
View(fooBar)
getRecommendedItems <- function(prefs, itemMatch, user) {
# Extract the movies user has seen, keep movie and grade
userRatings <- prefs[which(prefs[[personIdCol]] == user), c(itemIdCol, valueIdCol)]
# get vector of movie names
moviesUserHasRated <- userRatings[[itemIdCol]] %>% unlist(use.names = FALSE)
# From the similarity data.frame select movies that:
# - user has reviewed
# - with each of those records, keep the ones where "the movie in compare"
#   is new to user...
conditionA <- itemMatch[[itemIdCol]] %in% moviesUserHasRated
conditionB <- !itemMatch$Target %in% moviesUserHasRated
scores <- itemMatch[which(conditionA & conditionB),] %>% arrange(.[[itemIdCol]])
scores
#userRatings <- userRatings %>% left_join(scores, by = "Movie")
#userRatings$Score <- userRatings[[valueIdCol]] * userRatings$Similarity
#userRatings %>%
#  group_by(Target) %>%
#  summarise(Estimate = sum(Score) / sum(Similarity)) %>%
#  arrange(desc(Estimate))
}
# Column that is used to identify persons
personIdCol <- "Person"
# Column that is used to identify items
itemIdCol <- "Movie"
fooBar <- getRecommendedItems(reviews, itemsim, 'Toby')
getRecommendedItems <- function(prefs, itemMatch, user) {
# Extract the movies user has seen, keep movie and grade
userRatings <- prefs[which(prefs[[personIdCol]] == user), c(itemIdCol, valueIdCol)]
# get vector of movie names
moviesUserHasRated <- userRatings[[itemIdCol]] %>% unlist(use.names = FALSE)
# From the similarity data.frame select movies that:
# - user has reviewed
# - with each of those records, keep the ones where "the movie in compare"
#   is new to user...
conditionA <- itemMatch[[itemIdCol]] %in% moviesUserHasRated
conditionB <- !itemMatch$Target %in% moviesUserHasRated
scores <- itemMatch[which(conditionA & conditionB),] %>% arrange(.[[itemIdCol]])
userRatings <- userRatings %>% left_join(scores, by = "Movie")
userRatings
#userRatings$Score <- userRatings[[valueIdCol]] * userRatings$Similarity
#userRatings %>%
#  group_by(Target) %>%
#  summarise(Estimate = sum(Score) / sum(Similarity)) %>%
#  arrange(desc(Estimate))
}
# Column that is used to identify persons
personIdCol <- "Person"
# Column that is used to identify items
itemIdCol <- "Movie"
fooBar <- getRecommendedItems(reviews, itemsim, 'Toby')
getRecommendedItems <- function(prefs, itemMatch, user) {
# Extract the movies user has seen, keep movie and grade
userRatings <- prefs[which(prefs[[personIdCol]] == user), c(itemIdCol, valueIdCol)]
# get vector of movie names
moviesUserHasRated <- userRatings[[itemIdCol]] %>% unlist(use.names = FALSE)
# From the similarity data.frame select movies that:
# - user has reviewed
# - with each of those records, keep the ones where "the movie in compare"
#   is new to user...
conditionA <- itemMatch[[itemIdCol]] %in% moviesUserHasRated
conditionB <- !itemMatch$Target %in% moviesUserHasRated
scores <- itemMatch[which(conditionA & conditionB),] %>% arrange(.[[itemIdCol]])
# combine user ratings with similarity data
userRatings <- userRatings %>% left_join(scores, by = "Movie")
userRatings$Score <- userRatings[[valueIdCol]] * userRatings$Similarity
userRatings
#userRatings %>%
#  group_by(Target) %>%
#  summarise(Estimate = sum(Score) / sum(Similarity)) %>%
#  arrange(desc(Estimate))
}
# Column that is used to identify persons
personIdCol <- "Person"
# Column that is used to identify items
itemIdCol <- "Movie"
fooBar <- getRecommendedItems(reviews, itemsim, 'Toby')
getRecommendedItems <- function(prefs, itemMatch, user) {
# Extract the movies user has seen, keep movie and grade
userRatings <- prefs[which(prefs[[personIdCol]] == user), c(itemIdCol, valueIdCol)]
# get vector of movie names
moviesUserHasRated <- userRatings[[itemIdCol]] %>% unlist(use.names = FALSE)
# From the similarity data.frame select movies that:
# - user has reviewed
# - with each of those records, keep the ones where "the movie in compare"
#   is new to user...
conditionA <- itemMatch[[itemIdCol]] %in% moviesUserHasRated
conditionB <- !itemMatch$Target %in% moviesUserHasRated
scores <- itemMatch[which(conditionA & conditionB),] %>% arrange(.[[itemIdCol]])
# combine user ratings with similarity data
userRatings <- userRatings %>% left_join(scores, by = "Movie")
userRatings$Score <- userRatings[[valueIdCol]] * userRatings$Similarity
userRatings %>%
group_by(Target) %>%
summarise(Estimate = sum(Score) / sum(Similarity)) %>%
arrange(desc(Estimate))
}
# Column that is used to identify persons
personIdCol <- "Person"
# Column that is used to identify items
itemIdCol <- "Movie"
fooBar <- getRecommendedItems(reviews, itemsim, 'Toby')
