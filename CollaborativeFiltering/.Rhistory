#userRatings$Score <- userRatings[[valueIdCol]] * userRatings$Similarity
#userRatings %>%
#  group_by(Original) %>%
#  summarise(Estimate = sum(Score) / sum(Similarity)) %>%
#  arrange(desc(Estimate))
}
# Column that is used to identify persons
personIdCol <- "Person"
# Column that is used to identify items
itemIdCol <- "Movie"
fooBar <- getRecommendedItems(reviews, itemsim, 'Toby')
# Column that is used to identify persons
personIdCol <- "Person"
# Column that is used to identify items
itemIdCol <- "Movie"
fooBar <- getRecommendedItems(reviews, itemsim, 'Toby')
fooBar
getRecommendedItems <- function(prefs, itemMatch, user) {
# Extract the movies user has seen, keep movie and grade
userRatings <- prefs[which(prefs[[personIdCol]] == user), c(itemIdCol, valueIdCol)]
# get vector of movie names
moviesUserHasRated <- userRatings[[itemIdCol]] %>% unlist(use.names = FALSE)
# From the similarity data.frame select movies:
# - user have reviewed
# - with each of those similarity no new ones
conditionA <- itemMatch$Movie %in% moviesUserHasRated
conditionB <- !itemMatch$Original %in% moviesUserHasRated
scores <- itemMatch[which(conditionA & conditionB),] %>% arrange(.[[itemIdCol]])
scores
#userRatings <- userRatings %>% left_join(scores, by = "Movie")
#userRatings$Score <- userRatings[[valueIdCol]] * userRatings$Similarity
#userRatings %>%
#  group_by(Original) %>%
#  summarise(Estimate = sum(Score) / sum(Similarity)) %>%
#  arrange(desc(Estimate))
}
# Column that is used to identify persons
personIdCol <- "Person"
# Column that is used to identify items
itemIdCol <- "Movie"
fooBar <- getRecommendedItems(reviews, itemsim, 'Toby')
getRecommendedItems <- function(prefs, itemMatch, user) {
# Extract the movies user has seen, keep movie and grade
userRatings <- prefs[which(prefs[[personIdCol]] == user), c(itemIdCol, valueIdCol)]
# get vector of movie names
moviesUserHasRated <- userRatings[[itemIdCol]] %>% unlist(use.names = FALSE)
# From the similarity data.frame select movies:
# - user have reviewed
# - with each of those similarity no new ones
conditionA <- itemMatch$Movie %in% moviesUserHasRated
conditionB <- !itemMatch$Original %in% moviesUserHasRated
scores <- itemMatch[which(conditionA & conditionB),] %>% arrange(.[[itemIdCol]])
scores
#userRatings <- userRatings %>% left_join(scores, by = "Movie")
#userRatings$Score <- userRatings[[valueIdCol]] * userRatings$Similarity
#userRatings %>%
#  group_by(Original) %>%
#  summarise(Estimate = sum(Score) / sum(Similarity)) %>%
#  arrange(desc(Estimate))
}
# Column that is used to identify persons
personIdCol <- "Person"
# Column that is used to identify items
itemIdCol <- "Movie"
fooBar <- getRecommendedItems(reviews, itemsim, 'Toby')
calculateSimilarItems <- function(prefs, n = 10, similarity = pearson) {
# Get the list of movies!
items <- unique(prefs[[personIdCol]])
# For each item, calculate similarity values with other items
itemSimList <-  apply(
as.data.frame(items),
1,
function(x) topMatches(prefs, x[1],similarity = euclidean, includeOriginal = TRUE)
)
# Previous phase results list of data.frames
# convert that data srructure to single Data.Frame
do.call("rbind", itemSimList)
}
# Column that is used to identify persons
personIdCol <- "Movie"
# Column that is used to identify items
itemIdCol <- "Person"
itemsim <- calculateSimilarItems(reviews)
getRecommendedItems <- function(prefs, itemMatch, user) {
# Extract the movies user has seen, keep movie and grade
userRatings <- prefs[which(prefs[[personIdCol]] == user), c(itemIdCol, valueIdCol)]
# get vector of movie names
moviesUserHasRated <- userRatings[[itemIdCol]] %>% unlist(use.names = FALSE)
# From the similarity data.frame select movies:
# - user have reviewed
# - with each of those similarity no new ones
conditionA <- itemMatch$Movie %in% moviesUserHasRated
conditionB <- !itemMatch$Original %in% moviesUserHasRated
scores <- itemMatch[which(conditionA & conditionB),] %>% arrange(.[[itemIdCol]])
scores
#userRatings <- userRatings %>% left_join(scores, by = "Movie")
#userRatings$Score <- userRatings[[valueIdCol]] * userRatings$Similarity
#userRatings %>%
#  group_by(Original) %>%
#  summarise(Estimate = sum(Score) / sum(Similarity)) %>%
#  arrange(desc(Estimate))
}
# Column that is used to identify persons
personIdCol <- "Person"
# Column that is used to identify items
itemIdCol <- "Movie"
fooBar <- getRecommendedItems(reviews, itemsim, 'Toby')
fooBar
View(fooBar)
View(itemsim)
calculateSimilarItems <- function(prefs, n = 10, similarity = pearson) {
# Get the list of movies!
items <- unique(prefs[[personIdCol]])
# For each item, calculate similarity values with other items
# - Now we also wan't to store name of the target in topMatches
itemSimList <-  apply(
as.data.frame(items),
1,
function(x) topMatches(prefs, x[1],similarity = euclidean,
includeOriginal = TRUE)
)
# Previous phase results list of data.frames
# convert that data srructure to single Data.Frame
do.call("rbind", itemSimList)
}
calculateSimilarItems <- function(prefs, n = 10, similarity = pearson) {
# Get the list of movies!
items <- unique(prefs[[personIdCol]])
# For each item, calculate similarity values with other items
# - Now we also wan't to include name of the target in topMatches
itemSimList <-  apply(
as.data.frame(items),
1,
function(x) topMatches(prefs, x[1],similarity = euclidean,
includeOriginal = TRUE)
)
# Previous phase results list of data.frames
# convert that data srructure to single Data.Frame
do.call("rbind", itemSimList)
}
# Column that is used to identify persons
personIdCol <- "Movie"
# Column that is used to identify items
itemIdCol <- "Person"
itemsim <- calculateSimilarItems(reviews)
getRecommendedItems <- function(prefs, itemMatch, user) {
# Extract the movies user has seen, keep movie and grade
userRatings <- prefs[which(prefs[[personIdCol]] == user), c(itemIdCol, valueIdCol)]
# get vector of movie names
moviesUserHasRated <- userRatings[[itemIdCol]] %>% unlist(use.names = FALSE)
# From the similarity data.frame select movies:
# - user have reviewed
# - with each of those similarity no new ones
conditionA <- itemMatch$Movie %in% moviesUserHasRated
conditionB <- !itemMatch$Target %in% moviesUserHasRated
scores <- itemMatch[which(conditionA & conditionB),] %>% arrange(.[[itemIdCol]])
scores
#userRatings <- userRatings %>% left_join(scores, by = "Movie")
#userRatings$Score <- userRatings[[valueIdCol]] * userRatings$Similarity
#userRatings %>%
#  group_by(Target) %>%
#  summarise(Estimate = sum(Score) / sum(Similarity)) %>%
#  arrange(desc(Estimate))
}
# Column that is used to identify persons
personIdCol <- "Person"
# Column that is used to identify items
itemIdCol <- "Movie"
fooBar <- getRecommendedItems(reviews, itemsim, 'Toby')
fooBar
getRecommendedItems <- function(prefs, itemMatch, user) {
# Extract the movies user has seen, keep movie and grade
userRatings <- prefs[which(prefs[[personIdCol]] == user), c(itemIdCol, valueIdCol)]
# get vector of movie names
moviesUserHasRated <- userRatings[[itemIdCol]] %>% unlist(use.names = FALSE)
# From the similarity data.frame select movies that:
# - user has reviewed
# - with each of those records, keep the ones where "the movie in compare"
#   is new to user...
conditionA <- itemMatch$Movie %in% moviesUserHasRated
conditionB <- !itemMatch$Target %in% moviesUserHasRated
scores <- itemMatch[which(conditionA & conditionB),] %>% arrange(.[[itemIdCol]])
scores
#userRatings <- userRatings %>% left_join(scores, by = "Movie")
#userRatings$Score <- userRatings[[valueIdCol]] * userRatings$Similarity
#userRatings %>%
#  group_by(Target) %>%
#  summarise(Estimate = sum(Score) / sum(Similarity)) %>%
#  arrange(desc(Estimate))
}
# Column that is used to identify persons
personIdCol <- "Person"
# Column that is used to identify items
itemIdCol <- "Movie"
fooBar <- getRecommendedItems(reviews, itemsim, 'Toby')
fooBar
# Column that is used to identify persons
personIdCol <- "Person"
# Column that is used to identify items
itemIdCol <- "Movie"
fooBar <- getRecommendedItems(reviews, itemsim, 'Toby')
View(fooBar)
getRecommendedItems <- function(prefs, itemMatch, user) {
# Extract the movies user has seen, keep movie and grade
userRatings <- prefs[which(prefs[[personIdCol]] == user), c(itemIdCol, valueIdCol)]
# get vector of movie names
moviesUserHasRated <- userRatings[[itemIdCol]] %>% unlist(use.names = FALSE)
# From the similarity data.frame select movies that:
# - user has reviewed
# - with each of those records, keep the ones where "the movie in compare"
#   is new to user...
conditionA <- itemMatch[[itemIdCol]] %in% moviesUserHasRated
conditionB <- !itemMatch$Target %in% moviesUserHasRated
scores <- itemMatch[which(conditionA & conditionB),] %>% arrange(.[[itemIdCol]])
scores
#userRatings <- userRatings %>% left_join(scores, by = "Movie")
#userRatings$Score <- userRatings[[valueIdCol]] * userRatings$Similarity
#userRatings %>%
#  group_by(Target) %>%
#  summarise(Estimate = sum(Score) / sum(Similarity)) %>%
#  arrange(desc(Estimate))
}
# Column that is used to identify persons
personIdCol <- "Person"
# Column that is used to identify items
itemIdCol <- "Movie"
fooBar <- getRecommendedItems(reviews, itemsim, 'Toby')
getRecommendedItems <- function(prefs, itemMatch, user) {
# Extract the movies user has seen, keep movie and grade
userRatings <- prefs[which(prefs[[personIdCol]] == user), c(itemIdCol, valueIdCol)]
# get vector of movie names
moviesUserHasRated <- userRatings[[itemIdCol]] %>% unlist(use.names = FALSE)
# From the similarity data.frame select movies that:
# - user has reviewed
# - with each of those records, keep the ones where "the movie in compare"
#   is new to user...
conditionA <- itemMatch[[itemIdCol]] %in% moviesUserHasRated
conditionB <- !itemMatch$Target %in% moviesUserHasRated
scores <- itemMatch[which(conditionA & conditionB),] %>% arrange(.[[itemIdCol]])
userRatings <- userRatings %>% left_join(scores, by = "Movie")
userRatings
#userRatings$Score <- userRatings[[valueIdCol]] * userRatings$Similarity
#userRatings %>%
#  group_by(Target) %>%
#  summarise(Estimate = sum(Score) / sum(Similarity)) %>%
#  arrange(desc(Estimate))
}
# Column that is used to identify persons
personIdCol <- "Person"
# Column that is used to identify items
itemIdCol <- "Movie"
fooBar <- getRecommendedItems(reviews, itemsim, 'Toby')
getRecommendedItems <- function(prefs, itemMatch, user) {
# Extract the movies user has seen, keep movie and grade
userRatings <- prefs[which(prefs[[personIdCol]] == user), c(itemIdCol, valueIdCol)]
# get vector of movie names
moviesUserHasRated <- userRatings[[itemIdCol]] %>% unlist(use.names = FALSE)
# From the similarity data.frame select movies that:
# - user has reviewed
# - with each of those records, keep the ones where "the movie in compare"
#   is new to user...
conditionA <- itemMatch[[itemIdCol]] %in% moviesUserHasRated
conditionB <- !itemMatch$Target %in% moviesUserHasRated
scores <- itemMatch[which(conditionA & conditionB),] %>% arrange(.[[itemIdCol]])
# combine user ratings with similarity data
userRatings <- userRatings %>% left_join(scores, by = "Movie")
userRatings$Score <- userRatings[[valueIdCol]] * userRatings$Similarity
userRatings
#userRatings %>%
#  group_by(Target) %>%
#  summarise(Estimate = sum(Score) / sum(Similarity)) %>%
#  arrange(desc(Estimate))
}
# Column that is used to identify persons
personIdCol <- "Person"
# Column that is used to identify items
itemIdCol <- "Movie"
fooBar <- getRecommendedItems(reviews, itemsim, 'Toby')
getRecommendedItems <- function(prefs, itemMatch, user) {
# Extract the movies user has seen, keep movie and grade
userRatings <- prefs[which(prefs[[personIdCol]] == user), c(itemIdCol, valueIdCol)]
# get vector of movie names
moviesUserHasRated <- userRatings[[itemIdCol]] %>% unlist(use.names = FALSE)
# From the similarity data.frame select movies that:
# - user has reviewed
# - with each of those records, keep the ones where "the movie in compare"
#   is new to user...
conditionA <- itemMatch[[itemIdCol]] %in% moviesUserHasRated
conditionB <- !itemMatch$Target %in% moviesUserHasRated
scores <- itemMatch[which(conditionA & conditionB),] %>% arrange(.[[itemIdCol]])
# combine user ratings with similarity data
userRatings <- userRatings %>% left_join(scores, by = "Movie")
userRatings$Score <- userRatings[[valueIdCol]] * userRatings$Similarity
userRatings %>%
group_by(Target) %>%
summarise(Estimate = sum(Score) / sum(Similarity)) %>%
arrange(desc(Estimate))
}
# Column that is used to identify persons
personIdCol <- "Person"
# Column that is used to identify items
itemIdCol <- "Movie"
fooBar <- getRecommendedItems(reviews, itemsim, 'Toby')
knitr::opts_chunk$set(echo = TRUE)
on_kaggle <- 0
# Column that is used to identify persons
personIdCol <- "Person"
# Column that is used to identify items
itemIdCol <- "Movie"
# Column that stores the grades
valueIdCol <- "Grade"
# Column that stores calculated similarity value
similarityCol <- "Similarity"
# Path of the directory where data is stored
if (on_kaggle == 0){
path <- "./"
} else {
path <- "../input/tmdb-movie-metadata/"
}
library(tidyverse)
reviews <- read_csv(str_c(path, "recommendations.csv"), na="NA")
# Calculate Euclidean Distance Score
# euclidean <- function(a,b) 1 / (1 + sqrt(sum((a-b)^2)))
euclidean <- function(a,b) 1 / (1 + sum((a-b)^2))
# Calculate Pearson Correlation Score
pearson <- function(a,b) cor(a, b, method = 'pearson')
calculateSimilarityScore <- function(prefs, person1, person2, similarityFunction){
# Extract items that persons have reviewed and make sure items are in the same order
p1Reviews <- prefs[which(prefs[[personIdCol]] == person1),] %>% arrange(.[[itemIdCol]])
p2Reviews <- prefs[which(prefs[[personIdCol]] == person2),] %>% arrange(.[[itemIdCol]])
# Items that both have reviews
sharedItems <- intersect(p1Reviews[,itemIdCol], p2Reviews[,itemIdCol]) %>%
unlist(use.names = FALSE)
if(length(sharedItems) == 0)
return(0)
# Extract the grades of items both have graded
p1Grades <- p1Reviews[which(p1Reviews[[itemIdCol]] %in% sharedItems), valueIdCol] %>%
unlist(use.names = FALSE)
p2Grades <- p2Reviews[which(p2Reviews[[itemIdCol]] %in% sharedItems), valueIdCol] %>%
unlist(use.names = FALSE)
return(similarityFunction(p1Grades, p2Grades))
}
p1 = 'Lisa Rose'
p2 = 'Gene Seymour'
calculateSimilarityScore(reviews, p1, p2, euclidean)
calculateSimilarityScore(reviews, p1, p2, pearson)
# calculate similarity scores using the selected similarity function
getSimilarityScores <- function(prefs, person, similarity) {
# get the data.frame of other users
others <- prefs[which(prefs[[personIdCol]] != person), personIdCol] %>%
distinct()
# calculate similarity scores
similarity <- apply(
others[,1],
1,
function(x) calculateSimilarityScore(prefs, person, x, similarity)
)
# add similarity scores to user data.frame
others[similarityCol] = similarity
# sort results
others %>%
arrange(desc(.[[similarityCol]]))
}
# Returns the best matches for person from the prefs table
topMatches <- function(prefs, person, n = 5, similarity = pearson, includeOriginal = FALSE) {
# sort other users based on their similarity
others <- getSimilarityScores(prefs, person , similarity)
# pick top "n"
others <- others %>%
top_n(n, wt = .[[similarityCol]])
# in case needed store also the recommendee name
if(includeOriginal == TRUE) {
others <- others %>% mutate(Target = person)
}
others
}
topMatches(reviews, 'Toby', n=3)
getRecommendations <- function(prefs, person, similarity) {
# extract the items recommendee has already reviewed
personsReviews <- prefs[which(prefs[[personIdCol]] == person), itemIdCol] %>%
unlist(use.names = FALSE)
# get recommenders similarity socres
others <- getSimilarityScores(prefs, person , similarity)
# add reviews to the similarity table
others <- others %>% left_join(prefs, by=personIdCol)
# remove items recommendee has already reviewed and ignore scores of zero or lower
conditionA <- !others[[itemIdCol]] %in% personsReviews
conditionB <- others$Similarity > 0
others <- others[which(conditionA & conditionB),]
# calculate similarity * grade
others$simXGrade <- others[[valueIdCol]] * others$Similarity
# for each movie calculate sums of Similarity and similatiry * grade
# then ESTIMATED GRADE IS CALCULTED BY DIVISION..
others %>%
group_by_at(itemIdCol) %>%
summarise(Total = sum(simXGrade), Sim.Sum = sum(Similarity)) %>%
mutate(Estimate = Total / Sim.Sum, .keep = "unused") %>%
arrange(desc(.[[itemIdCol]]))
}
getRecommendations(reviews, 'Toby', euclidean)
# Column that is used to identify persons
personIdCol <- "Movie"
# Column that is used to identify items
itemIdCol <- "Person"
#topMatches(reviews, 'Superman Returns',5, euclidean)
topMatches(reviews, 'Superman Returns',5, pearson)
calculateSimilarItems <- function(prefs, n = 10, similarity = pearson) {
# Get the list of movies!
items <- unique(prefs[[personIdCol]])
# For each item, calculate similarity values with other items
# - Now we also wan't to include name of the target in topMatches
itemSimList <-  apply(
as.data.frame(items),
1,
function(x) topMatches(prefs, x[1],similarity = euclidean,
includeOriginal = TRUE)
)
# Previous phase results list of data.frames
# convert that data srructure to single Data.Frame
do.call("rbind", itemSimList)
}
# Column that is used to identify persons
personIdCol <- "Movie"
# Column that is used to identify items
itemIdCol <- "Person"
itemsim <- calculateSimilarItems(reviews)
getRecommendedItems <- function(prefs, itemMatch, user) {
# Extract the movies user has seen, keep movie and grade
userRatings <- prefs[which(prefs[[personIdCol]] == user), c(itemIdCol, valueIdCol)]
# get vector of movie names
moviesUserHasRated <- userRatings[[itemIdCol]] %>% unlist(use.names = FALSE)
# From the similarity data.frame select movies that:
# - user has reviewed
# - with each of those records, keep the ones where "the movie in compare"
#   is new to user...
conditionA <- itemMatch[[itemIdCol]] %in% moviesUserHasRated
conditionB <- !itemMatch$Target %in% moviesUserHasRated
scores <- itemMatch[which(conditionA & conditionB),] %>% arrange(.[[itemIdCol]])
# combine user ratings with similarity data
userRatings <- userRatings %>% left_join(scores, by = "Movie")
# multiply ratings with
userRatings$Score <- userRatings[[valueIdCol]] * userRatings$Similarity
#userRatings %>%
#  group_by(Target) %>%
#  summarise(Estimate = sum(Score) / sum(Similarity)) %>%
#  arrange(desc(Estimate))
}
# Column that is used to identify persons
personIdCol <- "Person"
# Column that is used to identify items
itemIdCol <- "Movie"
fooBar <- getRecommendedItems(reviews, itemsim, 'Toby')
getRecommendedItems <- function(prefs, itemMatch, user) {
# Extract the movies user has seen, keep movie and grade
userRatings <- prefs[which(prefs[[personIdCol]] == user), c(itemIdCol, valueIdCol)]
# get vector of movie names
moviesUserHasRated <- userRatings[[itemIdCol]] %>% unlist(use.names = FALSE)
# From the similarity data.frame select movies that:
# - user has reviewed
# - with each of those records, keep the ones where "the movie in compare"
#   is new to user...
conditionA <- itemMatch[[itemIdCol]] %in% moviesUserHasRated
conditionB <- !itemMatch$Target %in% moviesUserHasRated
scores <- itemMatch[which(conditionA & conditionB),] %>% arrange(.[[itemIdCol]])
# combine user ratings with similarity data
userRatings <- userRatings %>% left_join(scores, by = "Movie")
# multiply ratings with
userRatings$Score <- userRatings[[valueIdCol]] * userRatings$Similarity
#userRatings %>%
#  group_by(Target) %>%
#  summarise(Estimate = sum(Score) / sum(Similarity)) %>%
#  arrange(desc(Estimate))
userRatings
}
# Column that is used to identify persons
personIdCol <- "Person"
# Column that is used to identify items
itemIdCol <- "Movie"
fooBar <- getRecommendedItems(reviews, itemsim, 'Toby')
getRecommendedItems <- function(prefs, itemMatch, user) {
# Extract the movies user has seen, keep movie and grade
userRatings <- prefs[which(prefs[[personIdCol]] == user), c(itemIdCol, valueIdCol)]
# get vector of movie names
moviesUserHasRated <- userRatings[[itemIdCol]] %>% unlist(use.names = FALSE)
# From the similarity data.frame select movies that:
# - user has reviewed
# - with each of those records, keep the ones where "the movie in compare"
#   is new to user...
conditionA <- itemMatch[[itemIdCol]] %in% moviesUserHasRated
conditionB <- !itemMatch$Target %in% moviesUserHasRated
scores <- itemMatch[which(conditionA & conditionB),] %>% arrange(.[[itemIdCol]])
# combine user ratings with similarity data
userRatings <- userRatings %>% left_join(scores, by = "Movie")
# multiply ratings with similarity values
userRatings$Score <- userRatings[[valueIdCol]] * userRatings$Similarity
# calculate sums of similarity multiplied grades and similarities
# calculate final by normalizing sums of multiplied grades
userRatings %>%
group_by(Target) %>%
summarise(Estimate = sum(Score) / sum(Similarity)) %>%
arrange(desc(Estimate))
}
# Column that is used to identify persons
personIdCol <- "Person"
# Column that is used to identify items
itemIdCol <- "Movie"
fooBar <- getRecommendedItems(reviews, itemsim, 'Toby')
# Column that is used to identify persons
personIdCol <- "Person"
# Column that is used to identify items
itemIdCol <- "Movie"
getRecommendedItems(reviews, itemsim, 'Toby')
